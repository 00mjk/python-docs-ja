# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# E. Kawashima, 2017
# Nozomu Kaneko <nozom.kaneko@gmail.com>, 2017
# 秘湯 <xwhhsprings@gmail.com>, 2017
# Arihiro TAKASE, 2018
# tomo, 2019
# Tetsuo Koyama <tkoyama010@gmail.com>, 2020
# mollinaca, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-24 04:26+0000\n"
"PO-Revision-Date: 2017-02-16 17:44+0000\n"
"Last-Translator: mollinaca, 2020\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../howto/descriptor.rst:5
msgid "Descriptor HowTo Guide"
msgstr "デスクリプタ HowTo ガイド"

#: ../../howto/descriptor.rst:0
msgid "Author"
msgstr "著者"

#: ../../howto/descriptor.rst:7
msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

#: ../../howto/descriptor.rst:0
msgid "Contact"
msgstr "問い合わせ先"

#: ../../howto/descriptor.rst:8
msgid "<python at rcn dot com>"
msgstr "<python at rcn dot com>"

#: ../../howto/descriptor.rst:11
msgid "Contents"
msgstr "内容"

#: ../../howto/descriptor.rst:13
msgid ""
":term:`Descriptors <descriptor>` let objects customize attribute lookup, "
"storage, and deletion."
msgstr ""

#: ../../howto/descriptor.rst:16
msgid "This HowTo guide has three major sections:"
msgstr ""

#: ../../howto/descriptor.rst:18
msgid ""
"The \"primer\" gives a basic overview, moving gently from simple examples, "
"adding one feature at a time.  It is a great place to start."
msgstr ""

#: ../../howto/descriptor.rst:21
msgid ""
"The second section shows a complete, practical descriptor example.  If you "
"already know the basics, start there."
msgstr ""

#: ../../howto/descriptor.rst:24
msgid ""
"The third section provides a more technical tutorial that goes into the "
"detailed mechanics of how descriptors work.  Most people don't need this "
"level of detail."
msgstr ""

#: ../../howto/descriptor.rst:30
msgid "Primer"
msgstr ""

#: ../../howto/descriptor.rst:32
msgid ""
"In this primer, we start with most basic possible example and then we'll add"
" new capabilities one by one."
msgstr ""

#: ../../howto/descriptor.rst:37
msgid "Simple example: A descriptor that returns a constant"
msgstr ""

#: ../../howto/descriptor.rst:39
msgid ""
"The :class:`Ten` class is a descriptor that always returns the constant "
"``10``::"
msgstr ""

#: ../../howto/descriptor.rst:46
msgid ""
"To use the descriptor, it must be stored as a class variable in another "
"class::"
msgstr ""

#: ../../howto/descriptor.rst:52
msgid ""
"An interactive session shows the difference between normal attribute lookup "
"and descriptor lookup::"
msgstr ""

#: ../../howto/descriptor.rst:61
msgid ""
"In the ``a.x`` attribute lookup, the dot operator finds the value ``5`` "
"stored in the class dictionary.  In the ``a.y`` descriptor lookup, the dot "
"operator calls the descriptor's :meth:`__get__()` method.  That method "
"returns ``10``. Note that the value ``10`` is not stored in either the class"
" dictionary or the instance dictionary.  Instead, the value ``10`` is "
"computed on demand."
msgstr ""

#: ../../howto/descriptor.rst:67
msgid ""
"This example shows how a simple descriptor works, but it isn't very useful. "
"For retrieving constants, normal attribute lookup would be better."
msgstr ""

#: ../../howto/descriptor.rst:70
msgid ""
"In the next section, we'll create something more useful, a dynamic lookup."
msgstr ""

#: ../../howto/descriptor.rst:74
msgid "Dynamic lookups"
msgstr ""

#: ../../howto/descriptor.rst:76
msgid ""
"Interesting descriptors typically run computations instead of doing "
"lookups::"
msgstr ""

#: ../../howto/descriptor.rst:93
msgid ""
"An interactive session shows that the lookup is dynamic — it computes "
"different, updated answers each time::"
msgstr ""

#: ../../howto/descriptor.rst:107
msgid ""
"Besides showing how descriptors can run computations, this example also "
"reveals the purpose of the parameters to :meth:`__get__`.  The *self* "
"parameter is *size*, an instance of *DirectorySize*.  The *obj* parameter is"
" either *g* or *s*, an instance of *Directory*.  It is *obj* parameter that "
"lets the :meth:`__get__` method learn the target directory.  The *objtype* "
"parameter is the class *Directory*."
msgstr ""

#: ../../howto/descriptor.rst:116
msgid "Managed attributes"
msgstr ""

#: ../../howto/descriptor.rst:118
msgid ""
"A popular use for descriptors is managing access to instance data.  The "
"descriptor is assigned to a public attribute in the class dictionary while "
"the actual data is stored as a private attribute in the instance dictionary."
"  The descriptor's :meth:`__get__` and :meth:`__set__` methods are triggered"
" when the public attribute is accessed."
msgstr ""

#: ../../howto/descriptor.rst:124
msgid ""
"In the following example, *age* is the public attribute and *_age* is the "
"private attribute.  When the public attribute is accessed, the descriptor "
"logs the lookup or update::"
msgstr ""

#: ../../howto/descriptor.rst:155
msgid ""
"An interactive session shows that all access to the managed attribute *age* "
"is logged, but that the regular attribute *name* is not logged::"
msgstr ""

#: ../../howto/descriptor.rst:181
msgid ""
"One major issue with this example is the private name *_age* is hardwired in"
" the *LoggedAgeAccess* class.  That means that each instance can only have "
"one logged attribute and that its name is unchangeable.  In the next "
"example, we'll fix that problem."
msgstr ""

#: ../../howto/descriptor.rst:188
msgid "Customized Names"
msgstr ""

#: ../../howto/descriptor.rst:190
msgid ""
"When a class uses descriptors, it can inform each descriptor about what "
"variable name was used."
msgstr ""

#: ../../howto/descriptor.rst:193
msgid ""
"In this example, the :class:`Person` class has two descriptor instances, "
"*name* and *age*.  When the :class:`Person` class is defined, it makes a "
"callback to :meth:`__set_name__` in *LoggedAccess* so that the field names "
"can be recorded, giving each descriptor its own *public_name* and "
"*private_name*::"
msgstr ""

#: ../../howto/descriptor.rst:229
msgid ""
"An interactive session shows that the :class:`Person` class has called "
":meth:`__set_name__` so that the field names would be recorded.  Here we "
"call :func:`vars` to lookup the descriptor without triggering it::"
msgstr ""

#: ../../howto/descriptor.rst:238
msgid "The new class now logs access to both *name* and *age*::"
msgstr ""

#: ../../howto/descriptor.rst:247
msgid "The two *Person* instances contain only the private names::"
msgstr ""

#: ../../howto/descriptor.rst:256
msgid "Closing thoughts"
msgstr ""

#: ../../howto/descriptor.rst:258
msgid ""
"A :term:`descriptor` is what we call any object that defines "
":meth:`__get__`, :meth:`__set__`, or :meth:`__delete__`."
msgstr ""

#: ../../howto/descriptor.rst:261
msgid ""
"Descriptors get invoked by the dot operator during attribute lookup.  If a "
"descriptor is accessed indirectly with "
"``vars(some_class)[descriptor_name]``, the descriptor instance is returned "
"without invoking it."
msgstr ""

#: ../../howto/descriptor.rst:265
msgid ""
"Descriptors only work when used as class variables.  When put in instances, "
"they have no effect."
msgstr ""

#: ../../howto/descriptor.rst:268
msgid ""
"The main motivation for descriptors is to provide a hook allowing objects "
"stored in class variables to control what happens during dotted lookup."
msgstr ""

#: ../../howto/descriptor.rst:271
msgid ""
"Traditionally, the calling class controls what happens during lookup. "
"Descriptors invert that relationship and allow the data being looked-up to "
"have a say in the matter."
msgstr ""

#: ../../howto/descriptor.rst:275
msgid ""
"Descriptors are used throughout the language.  It is how functions turn into"
" bound methods.  Common tools like :func:`classmethod`, "
":func:`staticmethod`, :func:`property`, and "
":func:`functools.cached_property` are all implemented as descriptors."
msgstr ""

#: ../../howto/descriptor.rst:282
msgid "Complete Practical Example"
msgstr ""

#: ../../howto/descriptor.rst:284
msgid ""
"In this example, we create a practical and powerful tool for locating "
"notoriously hard to find data corruption bugs."
msgstr ""

#: ../../howto/descriptor.rst:289
msgid "Validator class"
msgstr ""

#: ../../howto/descriptor.rst:291
msgid ""
"A validator is a descriptor for managed attribute access.  Prior to storing "
"any data, it verifies that the new value meets various type and range "
"restrictions.  If those restrictions aren't met, it raises an exception to "
"prevents data corruption at its source."
msgstr ""

#: ../../howto/descriptor.rst:296
msgid ""
"This :class:`Validator` class is both an :term:`abstract base class` and a "
"managed attribute descriptor::"
msgstr ""

#: ../../howto/descriptor.rst:317
msgid ""
"Custom validators need to subclass from :class:`Validator` and supply a "
":meth:`validate` method to test various restrictions as needed."
msgstr ""

#: ../../howto/descriptor.rst:322
msgid "Custom validators"
msgstr ""

#: ../../howto/descriptor.rst:324
msgid "Here are three practical data validation utilities:"
msgstr ""

#: ../../howto/descriptor.rst:326
msgid ""
":class:`OneOf` verifies that a value is one of a restricted set of options."
msgstr ""

#: ../../howto/descriptor.rst:328
msgid ""
":class:`Number` verifies that a value is either an :class:`int` or "
":class:`float`.  Optionally, it verifies that a value is between a given "
"minimum or maximum."
msgstr ""

#: ../../howto/descriptor.rst:332
msgid ""
":class:`String` verifies that a value is a :class:`str`.  Optionally, it "
"validates a given minimum or maximum length.  Optionally, it can test for "
"another predicate as well."
msgstr ""

#: ../../howto/descriptor.rst:390
msgid "Practical use"
msgstr ""

#: ../../howto/descriptor.rst:392
msgid "Here's how the data validators can be used in a real class::"
msgstr ""

#: ../../howto/descriptor.rst:405
msgid "The descriptors prevent invalid instances from being created::"
msgstr ""

#: ../../howto/descriptor.rst:415
msgid "Technical Tutorial"
msgstr ""

#: ../../howto/descriptor.rst:417
msgid ""
"What follows is a more technical tutorial for the mechanics and details of "
"how descriptors work."
msgstr ""

#: ../../howto/descriptor.rst:422
msgid "Abstract"
msgstr "概要"

#: ../../howto/descriptor.rst:424
msgid ""
"Defines descriptors, summarizes the protocol, and shows how descriptors are "
"called.  Examines a custom descriptor and several built-in Python "
"descriptors including functions, properties, static methods, and class "
"methods.  Shows how each works by giving a pure Python equivalent and a "
"sample application."
msgstr ""

#: ../../howto/descriptor.rst:429
msgid ""
"Learning about descriptors not only provides access to a larger toolset, it "
"creates a deeper understanding of how Python works and an appreciation for "
"the elegance of its design."
msgstr ""
"デスクリプタについて学ぶことにより、新しいツールセットが使えるようになるだけでなく、Python "
"の仕組みや、洗練された設計のアプリケーションについてのより深い理解が得られます。"

#: ../../howto/descriptor.rst:435
msgid "Definition and Introduction"
msgstr "定義と導入"

#: ../../howto/descriptor.rst:437
msgid ""
"In general, a descriptor is an object attribute with \"binding behavior\", "
"one whose attribute access has been overridden by methods in the descriptor "
"protocol.  Those methods are :meth:`__get__`, :meth:`__set__`, and "
":meth:`__delete__`.  If any of those methods are defined for an object, it "
"is said to be a descriptor."
msgstr ""
"一般に、デスクリプタは \"束縛動作 (binding behavior)\" "
"をもつオブジェクト属性で、その属性アクセスが、デスクリプタプロトコルのメソッドによってオーバーライドされたものです。このメソッドは、 "
":meth:`__get__`, :meth:`__set__`, および :meth:`__delete__` "
"です。これらのメソッドのいずれかが、オブジェクトに定義されていれば、それはデスクリプタと呼ばれます。"

#: ../../howto/descriptor.rst:443
msgid ""
"The default behavior for attribute access is to get, set, or delete the "
"attribute from an object's dictionary.  For instance, ``a.x`` has a lookup "
"chain starting with ``a.__dict__['x']``, then ``type(a).__dict__['x']``, and"
" continuing through the base classes of ``type(a)`` excluding metaclasses. "
"If the looked-up value is an object defining one of the descriptor methods, "
"then Python may override the default behavior and invoke the descriptor "
"method instead. Where this occurs in the precedence chain depends on which "
"descriptor methods were defined."
msgstr ""
"属性アクセスのデフォルトの振る舞いは、オブジェクトの辞書の属性の取得、設定、削除です。例えば ``a.x`` は、まず "
"``a.__dict__['x']``、それから ``type(a).__dict__['x']``、さらに ``type(a)`` "
"のメタクラスを除く基底クラスへと続くというように探索が連鎖します。見つかった値が、デスクリプタメソッドのいずれかを定義しているオブジェクトなら、Python"
" "
"はそのデフォルトの振る舞いをオーバーライドし、代わりにデスクリプタメソッドを呼び出します。これがどの連鎖順位で行われるかは、どのデスクリプタメソッドが定義されているかに依ります。"

#: ../../howto/descriptor.rst:452
msgid ""
"Descriptors are a powerful, general purpose protocol.  They are the "
"mechanism behind properties, methods, static methods, class methods, and "
":func:`super()`.  They are used throughout Python itself.  Descriptors "
"simplify the underlying C code and offer a flexible set of new tools for "
"everyday Python programs."
msgstr ""

#: ../../howto/descriptor.rst:460
msgid "Descriptor Protocol"
msgstr "デスクリプタプロトコル"

#: ../../howto/descriptor.rst:462
msgid "``descr.__get__(self, obj, type=None) -> value``"
msgstr ""

#: ../../howto/descriptor.rst:464
msgid "``descr.__set__(self, obj, value) -> None``"
msgstr ""

#: ../../howto/descriptor.rst:466
msgid "``descr.__delete__(self, obj) -> None``"
msgstr ""

#: ../../howto/descriptor.rst:468
msgid ""
"That is all there is to it.  Define any of these methods and an object is "
"considered a descriptor and can override default behavior upon being looked "
"up as an attribute."
msgstr ""
"これで全てです。これらのメソッドのいずれかを定義すれば、オブジェクトはデスクリプタとみなされ、探索された際のデフォルトの振る舞いをオーバーライドできます。"

#: ../../howto/descriptor.rst:472
msgid ""
"If an object defines :meth:`__set__` or :meth:`__delete__`, it is considered"
" a data descriptor.  Descriptors that only define :meth:`__get__` are called"
" non-data descriptors (they are typically used for methods but other uses "
"are possible)."
msgstr ""

#: ../../howto/descriptor.rst:477
msgid ""
"Data and non-data descriptors differ in how overrides are calculated with "
"respect to entries in an instance's dictionary.  If an instance's dictionary"
" has an entry with the same name as a data descriptor, the data descriptor "
"takes precedence.  If an instance's dictionary has an entry with the same "
"name as a non-data descriptor, the dictionary entry takes precedence."
msgstr ""
"データデスクリプタと非データデスクリプタでは、オーバーライドがインスタンスの辞書のエントリに関してどのように計算されるかが異なります。インスタンスの辞書に、データデスクリプタと同名の項目があれば、データデスクリプタの方が優先されます。インスタンスの辞書に、非データデスクリプタと同名の項目があれば、辞書の項目の方が優先されます。"

#: ../../howto/descriptor.rst:483
msgid ""
"To make a read-only data descriptor, define both :meth:`__get__` and "
":meth:`__set__` with the :meth:`__set__` raising an :exc:`AttributeError` "
"when called.  Defining the :meth:`__set__` method with an exception raising "
"placeholder is enough to make it a data descriptor."
msgstr ""
"読み出し専用のデータデスクリプタを作るには、 :meth:`__get__` と :meth:`__set__` の両方を定義し、 "
":meth:`__set__` が呼び出されたときに :exc:`AttributeError` が送出されるようにしてください。例外を送出する "
":meth:`__set__` メソッドをプレースホルダとして定義すれば、データデスクリプタにするのに十分です。"

#: ../../howto/descriptor.rst:490
msgid "Invoking Descriptors"
msgstr "デスクリプタの呼び出し"

#: ../../howto/descriptor.rst:492
msgid ""
"A descriptor can be called directly by its method name.  For example, "
"``d.__get__(obj)``."
msgstr "デスクリプタは、メソッド名で直接呼ぶことも出来ます。例えば、``d.__get__(obj)`` です。"

#: ../../howto/descriptor.rst:495
msgid ""
"Alternatively, it is more common for a descriptor to be invoked "
"automatically upon attribute access.  For example, ``obj.d`` looks up ``d`` "
"in the dictionary of ``obj``.  If ``d`` defines the method :meth:`__get__`, "
"then ``d.__get__(obj)`` is invoked according to the precedence rules listed "
"below."
msgstr ""
"または、一般的に、デスクリプタは属性アクセスから自動的に呼び出されます。例えば、 ``obj.d`` は ``obj`` の辞書から ``d`` "
"を探索します。 ``d`` がメソッド :meth:`__get__` を定義していたら、以下に列挙する優先順位に従って、 "
"``d.__get__(obj)`` が呼び出されます。"

#: ../../howto/descriptor.rst:500
msgid ""
"The details of invocation depend on whether ``obj`` is an object or a class."
msgstr "呼び出しの詳細は、``obj`` がオブジェクトかクラスかに依ります。"

#: ../../howto/descriptor.rst:502
msgid ""
"For objects, the machinery is in :meth:`object.__getattribute__` which "
"transforms ``b.x`` into ``type(b).__dict__['x'].__get__(b, type(b))``.  The "
"implementation works through a precedence chain that gives data descriptors "
"priority over instance variables, instance variables priority over non-data "
"descriptors, and assigns lowest priority to :meth:`__getattr__` if provided."
" The full C implementation can be found in "
":c:func:`PyObject_GenericGetAttr()` in :source:`Objects/object.c`."
msgstr ""
"オブジェクトでは、その機構は ``b.x`` を ``type(b).__dict__['x'].__get__(b, type(b))`` に変換する"
" :meth:`object.__getattribute__` "
"にあります。データデスクリプタの優先度はインスタンス変数より高く、インスタンス変数の優先度は非データデスクリプタより高く、(提供されていれば) "
":meth:`__getattr__` の優先度が最も低いように実装されています。完全な C 実装は、 "
":source:`Objects/object.c` の :c:func:`PyObject_GenericGetAttr()` で見つかります。"

#: ../../howto/descriptor.rst:510
msgid ""
"For classes, the machinery is in :meth:`type.__getattribute__` which "
"transforms ``B.x`` into ``B.__dict__['x'].__get__(None, B)``.  In pure "
"Python, it looks like::"
msgstr ""
"クラスでは、その機構は ``B.x`` を ``B.__dict__['x'].__get__(None, B)`` に変換する "
":meth:`type.__getattribute__` にあります。 pure Python では、このようになります::"

#: ../../howto/descriptor.rst:521
msgid "The important points to remember are:"
msgstr "憶えておくべき重要な点は:"

#: ../../howto/descriptor.rst:523
msgid "descriptors are invoked by the :meth:`__getattribute__` method"
msgstr "デスクリプタは :meth:`__getattribute__` メソッドによって呼び出される"

#: ../../howto/descriptor.rst:524
msgid ""
"overriding :meth:`__getattribute__` prevents automatic descriptor calls"
msgstr ":meth:`__getattribute__` をオーバーライドすると、自動的なデスクリプタの呼び出しが行われなくなる"

#: ../../howto/descriptor.rst:525
msgid ""
":meth:`object.__getattribute__` and :meth:`type.__getattribute__` make "
"different calls to :meth:`__get__`."
msgstr ""
":meth:`object.__getattribute__` と :meth:`type.__getattribute__` では、 "
":meth:`__get__` の呼び出しが異なる。"

#: ../../howto/descriptor.rst:527
msgid "data descriptors always override instance dictionaries."
msgstr "データデスクリプタは、必ずインスタンス辞書をオーバーライドする。"

#: ../../howto/descriptor.rst:528
msgid "non-data descriptors may be overridden by instance dictionaries."
msgstr "非データデスクリプタは、インスタンス辞書にオーバーライドされることがある。"

#: ../../howto/descriptor.rst:530
msgid ""
"The object returned by ``super()`` also has a custom "
":meth:`__getattribute__` method for invoking descriptors.  The attribute "
"lookup ``super(B, obj).m`` searches ``obj.__class__.__mro__`` for the base "
"class ``A`` immediately following ``B`` and then returns "
"``A.__dict__['m'].__get__(obj, B)``.  If not a descriptor, ``m`` is returned"
" unchanged.  If not in the dictionary, ``m`` reverts to a search using "
":meth:`object.__getattribute__`."
msgstr ""

#: ../../howto/descriptor.rst:537
msgid ""
"The implementation details are in :c:func:`super_getattro()` in "
":source:`Objects/typeobject.c`.  and a pure Python equivalent can be found "
"in `Guido's Tutorial`_."
msgstr ""
"実装の詳細は、 :source:`Objects/typeobject.c` の :c:func:`super_getattro()` と、 "
"`Guido's Tutorial`_ にある等価な pure Python 版を参照してください。"

#: ../../howto/descriptor.rst:543
msgid ""
"The details above show that the mechanism for descriptors is embedded in the"
" :meth:`__getattribute__()` methods for :class:`object`, :class:`type`, and "
":func:`super`.  Classes inherit this machinery when they derive from "
":class:`object` or if they have a metaclass providing similar functionality."
" Likewise, classes can turn-off descriptor invocation by overriding "
":meth:`__getattribute__()`."
msgstr ""

#: ../../howto/descriptor.rst:552
msgid "Automatic Name Notification"
msgstr ""

#: ../../howto/descriptor.rst:554
msgid ""
"Sometimes it is desirable for a descriptor to know what class variable name "
"it was assigned to.  When a new class is created, the :class:`type` "
"metaclass scans the dictionary of the new class.  If any of the entries are "
"descriptors and if they define :meth:`__set_name__`, that method is called "
"with two arguments.  The *owner* is the class where the descriptor is used, "
"the *name* is class variable the descriptor was assigned to."
msgstr ""

#: ../../howto/descriptor.rst:561
msgid ""
"The implementation details are in :c:func:`type_new()` and "
":c:func:`set_names()` in :source:`Objects/typeobject.c`."
msgstr ""

#: ../../howto/descriptor.rst:564
msgid ""
"Since the update logic is in :meth:`type.__new__`, notifications only take "
"place at the time of class creation.  If descriptors are added to the class "
"afterwards, :meth:`__set_name__` will need to be called manually."
msgstr ""

#: ../../howto/descriptor.rst:570
msgid "Descriptor Example"
msgstr "デスクリプタの例"

#: ../../howto/descriptor.rst:572
msgid ""
"The following code creates a class whose objects are data descriptors which "
"print a message for each get or set.  Overriding :meth:`__getattribute__` is"
" alternate approach that could do this for every attribute.  However, this "
"descriptor is useful for monitoring just a few chosen attributes::"
msgstr ""
"以下のコードは、オブジェクトが取得と設定のたびにメッセージを表示するデータデスクリプタであるようなクラスを生成します。代わりに "
":meth:`__getattribute__` "
"をオーバーライドすると、全ての属性に対してこれができます。しかし、このデスクリプタは、少数の選ばれた属性を監視するのに便利です::"

#: ../../howto/descriptor.rst:610
msgid ""
"The protocol is simple and offers exciting possibilities.  Several use cases"
" are so common that they have been packaged into individual function calls. "
"Properties, bound methods, static methods, and class methods are all based "
"on the descriptor protocol."
msgstr ""
"このプロトコルは単純ですが、ワクワクする可能性も秘めています。ユースケースの中には、あまりに一般的なので個別の関数の呼び出しにまとめられたものもあります。プロパティ、束縛のメソッド、静的メソッド、そしてクラスメソッドは、全てデスクリプタプロトコルに基づいています。"

#: ../../howto/descriptor.rst:617
msgid "Properties"
msgstr "プロパティ"

#: ../../howto/descriptor.rst:619
msgid ""
"Calling :func:`property` is a succinct way of building a data descriptor "
"that triggers function calls upon access to an attribute.  Its signature "
"is::"
msgstr ""
":func:`property` "
"を呼び出すことで、属性へアクセスすると関数の呼び出しを引き起こす、データデスクリプタを簡潔に組み立てられます。シグネチャはこうです::"

#: ../../howto/descriptor.rst:624
msgid ""
"The documentation shows a typical use to define a managed attribute ``x``::"
msgstr "このドキュメントでは、管理された属性 ``x`` を定義する典型的な使用法を示します::"

#: ../../howto/descriptor.rst:632
msgid ""
"To see how :func:`property` is implemented in terms of the descriptor "
"protocol, here is a pure Python equivalent::"
msgstr ""
"デスクリプタの見地から :func:`property` がどのように実装されているかを見るために、等価な Python 版をここに挙げます::"

#: ../../howto/descriptor.rst:672
msgid ""
"The :func:`property` builtin helps whenever a user interface has granted "
"attribute access and then subsequent changes require the intervention of a "
"method."
msgstr ""
"組み込みの :func:`property` "
"関数は、ユーザインターフェースへの属性アクセスが与えられ、続く変更がメソッドの介入を要求するときに役立ちます。"

#: ../../howto/descriptor.rst:676
msgid ""
"For instance, a spreadsheet class may grant access to a cell value through "
"``Cell('b10').value``. Subsequent improvements to the program require the "
"cell to be recalculated on every access; however, the programmer does not "
"want to affect existing client code accessing the attribute directly.  The "
"solution is to wrap access to the value attribute in a property data "
"descriptor::"
msgstr ""
"例えば、スプレッドシートクラスが、``Cell('b10').value`` "
"でセルの値を取得できるとします。続く改良により、プログラムがアクセスの度にセルの再計算をすることを要求しました。しかしプログラマは、その属性に直接アクセスする既存のクライアントコードに影響を与えたくありません。この解決策は、property"
" データデスクリプタ内に値属性へのアクセスをラップすることです::"

#: ../../howto/descriptor.rst:693
msgid "Functions and Methods"
msgstr "関数とメソッド"

#: ../../howto/descriptor.rst:695
msgid ""
"Python's object oriented features are built upon a function based "
"environment. Using non-data descriptors, the two are merged seamlessly."
msgstr ""
"Python のオブジェクト指向機能は、関数に基づく環境の上に構築されています。非データデスクリプタを使って、この 2 "
"つはシームレスに組み合わされています。"

#: ../../howto/descriptor.rst:698
msgid ""
"Class dictionaries store methods as functions.  In a class definition, "
"methods are written using :keyword:`def` or :keyword:`lambda`, the usual "
"tools for creating functions.  Methods only differ from regular functions in"
" that the first argument is reserved for the object instance.  By Python "
"convention, the instance reference is called *self* but may be called *this*"
" or any other variable name."
msgstr ""
"クラス辞書は、メソッドを関数として保存します。クラス定義内で、メソッドは、関数を使うのに便利なツール、 :keyword:`def` か "
":keyword:`lambda` "
"を使って書かれます。メソッドの標準の関数との唯一の違いは、第一引数がオブジェクトインスタンスのために予約されていることです。 Python "
"の慣習では、このインスタンスの参照は *self* と呼ばれますが、 *this* その他の好きな変数名で呼び出せます。"

#: ../../howto/descriptor.rst:705
msgid ""
"To support method calls, functions include the :meth:`__get__` method for "
"binding methods during attribute access.  This means that all functions are "
"non-data descriptors which return bound methods when they are invoked from "
"an object.  In pure Python, it works like this::"
msgstr ""

#: ../../howto/descriptor.rst:719
msgid ""
"Running the following in class in the interpreter shows how the function "
"descriptor works in practice::"
msgstr ""

#: ../../howto/descriptor.rst:726
msgid ""
"Access through the class dictionary does not invoke :meth:`__get__`.  "
"Instead, it just returns the underlying function object::"
msgstr ""

#: ../../howto/descriptor.rst:732
msgid ""
"Dotted access from a class calls :meth:`__get__` which just returns the "
"underlying function unchanged::"
msgstr ""

#: ../../howto/descriptor.rst:738
msgid ""
"The function has a :term:`qualified name` attribute to support "
"introspection::"
msgstr ""

#: ../../howto/descriptor.rst:743
msgid ""
"Dotted access from an instance calls :meth:`__get__` which returns a bound "
"method object::"
msgstr ""

#: ../../howto/descriptor.rst:750
msgid ""
"Internally, the bound method stores the underlying function and the bound "
"instance::"
msgstr ""

#: ../../howto/descriptor.rst:760
msgid "Static Methods and Class Methods"
msgstr "静的メソッドとクラスメソッド"

#: ../../howto/descriptor.rst:762
msgid ""
"Non-data descriptors provide a simple mechanism for variations on the usual "
"patterns of binding functions into methods."
msgstr "非データデスクリプタは、関数をメソッドに束縛する、各種の一般的なパターンに、単純な機構を提供します。"

#: ../../howto/descriptor.rst:765
msgid ""
"To recap, functions have a :meth:`__get__` method so that they can be "
"converted to a method when accessed as attributes.  The non-data descriptor "
"transforms an ``obj.f(*args)`` call into ``f(obj, *args)``.  Calling "
"``cls.f(*args)`` becomes ``f(*args)``."
msgstr ""

#: ../../howto/descriptor.rst:770
msgid "This chart summarizes the binding and its two most useful variants:"
msgstr "このチャートは、束縛と、その 2 つの異なる便利な形をまとめています:"

#: ../../howto/descriptor.rst:773
msgid "Transformation"
msgstr "変換"

#: ../../howto/descriptor.rst:773
msgid "Called from an object"
msgstr ""

#: ../../howto/descriptor.rst:773
msgid "Called from a class"
msgstr ""

#: ../../howto/descriptor.rst:776
msgid "function"
msgstr "function"

#: ../../howto/descriptor.rst:776
msgid "f(obj, \\*args)"
msgstr "f(obj, \\*args)"

#: ../../howto/descriptor.rst:776 ../../howto/descriptor.rst:778
#: ../../howto/descriptor.rst:778
msgid "f(\\*args)"
msgstr "f(\\*args)"

#: ../../howto/descriptor.rst:778
msgid "staticmethod"
msgstr "静的メソッド"

#: ../../howto/descriptor.rst:780
msgid "classmethod"
msgstr "クラスメソッド"

#: ../../howto/descriptor.rst:780
msgid "f(type(obj), \\*args)"
msgstr "f(type(obj), \\*args)"

#: ../../howto/descriptor.rst:780
msgid "f(cls, \\*args)"
msgstr ""

#: ../../howto/descriptor.rst:783
msgid ""
"Static methods return the underlying function without changes.  Calling "
"either ``c.f`` or ``C.f`` is the equivalent of a direct lookup into "
"``object.__getattribute__(c, \"f\")`` or ``object.__getattribute__(C, "
"\"f\")``. As a result, the function becomes identically accessible from "
"either an object or a class."
msgstr ""
"静的メソッドは、下にある関数をそのまま返します。 ``c.f`` や ``C.f`` は、 ``object.__getattribute__(c, "
"\"f\")`` や ``object.__getattribute__(C, \"f\")`` "
"を直接探索するのと同じです。結果として、関数はオブジェクトとクラスから同じようにアクセスできます。"

#: ../../howto/descriptor.rst:789
msgid ""
"Good candidates for static methods are methods that do not reference the "
"``self`` variable."
msgstr "静的メソッドにすると良いのは、 ``self`` 変数への参照を持たないメソッドです。"

#: ../../howto/descriptor.rst:792
msgid ""
"For instance, a statistics package may include a container class for "
"experimental data.  The class provides normal methods for computing the "
"average, mean, median, and other descriptive statistics that depend on the "
"data. However, there may be useful functions which are conceptually related "
"but do not depend on the data.  For instance, ``erf(x)`` is handy conversion"
" routine that comes up in statistical work but does not directly depend on a"
" particular dataset. It can be called either from an object or the class:  "
"``s.erf(1.5) --> .9332`` or ``Sample.erf(1.5) --> .9332``."
msgstr ""
"例えば、統計パッケージに、実験データのコンテナがあるとします。そのクラスは、平均、メジアン、その他の、データに依る記述統計を計算する標準メソッドを提供します。しかし、概念上は関係があっても、データには依らないような便利な関数もあります。例えば、"
" ``erf(x)`` "
"は統計上の便利な変換ルーチンですが、特定のデータセットに直接には依存しません。これは、オブジェクトからでもクラスからでも呼び出せます: "
"``s.erf(1.5) --> .9332`` または ``Sample.erf(1.5) --> .9332`` 。"

#: ../../howto/descriptor.rst:801
msgid ""
"Since staticmethods return the underlying function with no changes, the "
"example calls are unexciting::"
msgstr "静的メソッドは下にある関数をそのまま返すので、呼び出しの例は面白くありません::"

#: ../../howto/descriptor.rst:814
msgid ""
"Using the non-data descriptor protocol, a pure Python version of "
":func:`staticmethod` would look like this::"
msgstr "非データデスクリプタプロトコルを使うと、pure Python 版の :func:`staticmethod` は以下のようになります::"

#: ../../howto/descriptor.rst:826
msgid ""
"Unlike static methods, class methods prepend the class reference to the "
"argument list before calling the function.  This format is the same for "
"whether the caller is an object or a class::"
msgstr ""
"静的メソッドとは違って、クラスメソッドは関数を呼び出す前にクラス参照を引数リストの先頭に加えます。このフォーマットは、呼び出し元がオブジェクトでもクラスでも同じです::"

#: ../../howto/descriptor.rst:841
msgid ""
"This behavior is useful whenever the function only needs to have a class "
"reference and does not care about any underlying data.  One use for "
"classmethods is to create alternate class constructors.  The classmethod "
":func:`dict.fromkeys` creates a new dictionary from a list of keys.  The "
"pure Python equivalent is::"
msgstr ""

#: ../../howto/descriptor.rst:858
msgid "Now a new dictionary of unique keys can be constructed like this::"
msgstr "これで一意なキーを持つ新しい辞書が以下のように構成できます::"

#: ../../howto/descriptor.rst:863
msgid ""
"Using the non-data descriptor protocol, a pure Python version of "
":func:`classmethod` would look like this::"
msgstr "非データデスクリプタプロトコルを使った、 :func:`classmethod` の pure Python 版はこのようになります::"

#: ../../howto/descriptor.rst:879
msgid ""
"The code path for ``hasattr(obj, '__get__')`` was added in Python 3.9 and "
"makes it possible for :func:`classmethod` to support chained decorators. For"
" example, a classmethod and property could be chained together::"
msgstr ""
