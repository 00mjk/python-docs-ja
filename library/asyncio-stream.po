# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-08 08:48+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Nakamura Masahito <randomstep@gmail.com>, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/python-doc/teams/5390/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../library/asyncio-stream.rst:7
msgid "Streams (coroutine based API)"
msgstr "ストリーム (コルーチンベースの API)"

#: ../../library/asyncio-stream.rst:9
msgid "**Source code:** :source:`Lib/asyncio/streams.py`"
msgstr "**ソースコード:** :source:`Lib/asyncio/streams.py`"

#: ../../library/asyncio-stream.rst:12
msgid "Stream functions"
msgstr "ストリーム関数"

#: ../../library/asyncio-stream.rst:16
msgid ""
"The top-level functions in this module are meant as convenience wrappers "
"only; there's really nothing special there, and if they don't do exactly "
"what you want, feel free to copy their code."
msgstr ""
"このモジュール内のトップレベル関数は、便利なラッパーとしてのみ意図されています。特別なことは何もありませんし、それらが思い通りに動作しない場合は、ご自由にコードをコピーしてください。"

#: ../../library/asyncio-stream.rst:23
msgid ""
"A wrapper for :meth:`~AbstractEventLoop.create_connection()` returning a "
"(reader, writer) pair."
msgstr ""
":meth:`~AbstractEventLoop.create_connection()` のラッパーで (reader, writer) "
"ペアを返します。"

#: ../../library/asyncio-stream.rst:26
msgid ""
"The reader returned is a :class:`StreamReader` instance; the writer is a "
":class:`StreamWriter` instance."
msgstr ""
"返されたリーダーは :class:`StreamReader` のインスタンスで、ライターは :class:`StreamWriter` "
"のインスタンスです。"

#: ../../library/asyncio-stream.rst:29 ../../library/asyncio-stream.rst:74
msgid ""
"When specified, the *loop* argument determines which event loop to use, and "
"the *limit* argument determines the buffer size limit used by the returned "
":class:`StreamReader` instance."
msgstr ""

#: ../../library/asyncio-stream.rst:33
msgid ""
"The rest of the arguments are passed directly to "
":meth:`AbstractEventLoop.create_connection`."
msgstr ""

#: ../../library/asyncio-stream.rst:36 ../../library/asyncio-stream.rst:63
#: ../../library/asyncio-stream.rst:81 ../../library/asyncio-stream.rst:113
msgid "This function is a :ref:`coroutine <coroutine>`."
msgstr "この関数は :ref:`コルーチン <coroutine>` です。"

#: ../../library/asyncio-stream.rst:40 ../../library/asyncio-stream.rst:87
msgid "The *ssl_handshake_timeout* parameter."
msgstr ""

#: ../../library/asyncio-stream.rst:44
msgid ""
"Start a socket server, with a callback for each client connected. The return"
" value is the same as :meth:`~AbstractEventLoop.create_server()`."
msgstr ""
"各クライアントが接続するコールバックでソケットサーバーを開始します。戻り値は "
":meth:`~AbstractEventLoop.create_server()` と同じです。"

#: ../../library/asyncio-stream.rst:47 ../../library/asyncio-stream.rst:97
msgid ""
"The *client_connected_cb* callback is called whenever a new client "
"connection is established.  It receives a reader/writer pair as two "
"arguments, the first is a :class:`StreamReader` instance, and the second is "
"a :class:`StreamWriter` instance."
msgstr ""

#: ../../library/asyncio-stream.rst:52 ../../library/asyncio-stream.rst:102
msgid ""
"*client_connected_cb* accepts a plain callable or a :ref:`coroutine function"
" <coroutine>`; if it is a coroutine function, it will be automatically "
"converted into a :class:`Task`."
msgstr ""

#: ../../library/asyncio-stream.rst:56 ../../library/asyncio-stream.rst:106
msgid ""
"When specified, the *loop* argument determines which event loop to use, and "
"the *limit* argument determines the buffer size limit used by the "
":class:`StreamReader` instance passed to *client_connected_cb*."
msgstr ""

#: ../../library/asyncio-stream.rst:60
msgid ""
"The rest of the arguments are passed directly to "
":meth:`~AbstractEventLoop.create_server()`."
msgstr ""

#: ../../library/asyncio-stream.rst:67 ../../library/asyncio-stream.rst:119
msgid "The *ssl_handshake_timeout* and *start_serving* parameters."
msgstr ""

#: ../../library/asyncio-stream.rst:71
msgid ""
"A wrapper for :meth:`~AbstractEventLoop.create_unix_connection()` returning "
"a (reader, writer) pair."
msgstr ""
":meth:`~AbstractEventLoop.create_unix_connection()` のラッパーで (reader, writer) "
"ペアを返します。"

#: ../../library/asyncio-stream.rst:78
msgid ""
"The rest of the arguments are passed directly to "
":meth:`~AbstractEventLoop.create_unix_connection()`."
msgstr ""

#: ../../library/asyncio-stream.rst:83 ../../library/asyncio-stream.rst:115
msgid "Availability: UNIX."
msgstr "利用できる環境: UNIX。"

#: ../../library/asyncio-stream.rst:91
msgid "The *path* parameter can now be a :term:`path-like object`"
msgstr ""

#: ../../library/asyncio-stream.rst:95
msgid ""
"Start a UNIX Domain Socket server, with a callback for each client "
"connected."
msgstr "接続された各クライアントごとのコールバックとともに UNIX ドメインソケットサーバーを開始します。"

#: ../../library/asyncio-stream.rst:110
msgid ""
"The rest of the arguments are passed directly to "
":meth:`~AbstractEventLoop.create_unix_server()`."
msgstr ""

#: ../../library/asyncio-stream.rst:123
msgid "The *path* parameter can now be a :term:`path-like object`."
msgstr ""

#: ../../library/asyncio-stream.rst:127
msgid "StreamReader"
msgstr "StreamReader"

#: ../../library/asyncio-stream.rst:131 ../../library/asyncio-stream.rst:227
msgid "This class is :ref:`not thread safe <asyncio-multithreading>`."
msgstr "このクラスは :ref:`スレッド安全ではありません <asyncio-multithreading>`。"

#: ../../library/asyncio-stream.rst:135
msgid "Get the exception."
msgstr "例外を取得します。"

#: ../../library/asyncio-stream.rst:139
msgid "Acknowledge the EOF."
msgstr "EOF の肯定応答を行います。"

#: ../../library/asyncio-stream.rst:143
msgid ""
"Feed *data* bytes in the internal buffer.  Any operations waiting for the "
"data will be resumed."
msgstr "バイト列 *data* を内部バッファーに取り込みます。データを待っているあらゆる処理が再開されます。"

#: ../../library/asyncio-stream.rst:148
msgid "Set the exception."
msgstr "例外を設定します。"

#: ../../library/asyncio-stream.rst:152
msgid "Set the transport."
msgstr "トランスポートを設定します。"

#: ../../library/asyncio-stream.rst:156
msgid ""
"Read up to *n* bytes.  If *n* is not provided, or set to ``-1``, read until "
"EOF and return all read bytes."
msgstr "*n* バイト読み込みます。*n* が指定されないか ``-1`` が指定されていた場合 EOF になるまで読み込み、全データを返します。"

#: ../../library/asyncio-stream.rst:159 ../../library/asyncio-stream.rst:171
msgid ""
"If the EOF was received and the internal buffer is empty, return an empty "
"``bytes`` object."
msgstr "EOF に達しており内部バッファーが空であれば、空の ``bytes`` オブジェクトを返します。"

#: ../../library/asyncio-stream.rst:162 ../../library/asyncio-stream.rst:174
#: ../../library/asyncio-stream.rst:183 ../../library/asyncio-stream.rst:276
msgid "This method is a :ref:`coroutine <coroutine>`."
msgstr "このメソッドは :ref:`コルーチン <coroutine>` です。"

#: ../../library/asyncio-stream.rst:166
msgid "Read one line, where \"line\" is a sequence of bytes ending with ``\\n``."
msgstr "1 行読み込みます。 \"行\" とは、``\\n`` で終了するバイト列のシーケンスです。"

#: ../../library/asyncio-stream.rst:168
msgid ""
"If EOF is received, and ``\\n`` was not found, the method will return the "
"partial read bytes."
msgstr "EOF を受信し、かつ ``\\n`` が見つからない場合、このメソッドは読み込んだ分の不完全なバイト列を返します。"

#: ../../library/asyncio-stream.rst:178
msgid ""
"Read exactly *n* bytes. Raise an :exc:`IncompleteReadError` if the end of "
"the stream is reached before *n* can be read, the "
":attr:`IncompleteReadError.partial` attribute of the exception contains the "
"partial read bytes."
msgstr ""
"厳密に *n* バイト読み込みます。*n* バイト読み込む前にストリームの終端に達したとき、:exc:`IncompleteReadError` "
"を送出します。例外の :attr:`IncompleteReadError.partial` 属性に、読み込んだ分の不完全なバイト列が格納されます。"

#: ../../library/asyncio-stream.rst:187
msgid "Read data from the stream until ``separator`` is found."
msgstr "``separator`` が見つかるまでストリームからデータを読み込みます。"

#: ../../library/asyncio-stream.rst:189
msgid ""
"On success, the data and separator will be removed from the internal buffer "
"(consumed). Returned data will include the separator at the end."
msgstr "成功時には、データと区切り文字は内部バッファから削除されます (消費されます)。返されるデータの最後には区切り文字が含まれます。"

#: ../../library/asyncio-stream.rst:193
msgid ""
"Configured stream limit is used to check result. Limit sets the maximal "
"length of data that can be returned, not counting the separator."
msgstr ""
"設定したストリームの制限は、結果を検証するために使用されます。制限により、返すことのできるデータの最大長さ (区切り文字を含まず) が設定されます。"

#: ../../library/asyncio-stream.rst:197
msgid ""
"If an EOF occurs and the complete separator is still not found, an "
":exc:`IncompleteReadError` exception will be raised, and the internal buffer"
" will be reset.  The :attr:`IncompleteReadError.partial` attribute may "
"contain the separator partially."
msgstr ""
"EOF が発生し、完全な区切り文字が見つからない場合には、:exc:`IncompleteReadError` "
"例外が創出されるとともに、内部バッファはリセットされます。 :attr:`IncompleteReadError.partial` "
"属性に、区切り文字が部分的に含まれる場合があります。"

#: ../../library/asyncio-stream.rst:203
msgid ""
"If the data cannot be read because of over limit, a :exc:`LimitOverrunError`"
" exception  will be raised, and the data will be left in the internal "
"buffer, so it can be read again."
msgstr ""
"制限超過のためにデータを読み取ることができない場合、:exc:`LimitOverrunError` "
"例外が送出され、データは内部バッファ内に残ります。そのため、データを再度読み取ることができます。"

#: ../../library/asyncio-stream.rst:211
msgid ""
"Return ``True`` if the buffer is empty and :meth:`feed_eof` was called."
msgstr "バッファーが空で :meth:`feed_eof` が呼ばれていた場合 ``True`` を返します。"

#: ../../library/asyncio-stream.rst:215
msgid "StreamWriter"
msgstr "StreamWriter"

#: ../../library/asyncio-stream.rst:219
msgid "Wraps a Transport."
msgstr "トランスポートをラップします。"

#: ../../library/asyncio-stream.rst:221
msgid ""
"This exposes :meth:`write`, :meth:`writelines`, :meth:`can_write_eof()`, "
":meth:`write_eof`, :meth:`get_extra_info` and :meth:`close`.  It adds "
":meth:`drain` which returns an optional :class:`Future` on which you can "
"wait for flow control.  It also adds a transport attribute which references "
"the :class:`Transport` directly."
msgstr ""
"これは "
":meth:`write`、:meth:`writelines`、:meth:`can_write_eof()`、:meth:`write_eof`、:meth:`get_extra_info`"
" および :meth:`close` メソッドを提供します。フロー制御を待機できる任意の :class:`Future` を返す "
":meth:`drain` メソッドを追加します。また、:class:`Transport` を直接参照する transport 属性も追加します。"

#: ../../library/asyncio-stream.rst:231
msgid "Transport."
msgstr "トランスポートです。"

#: ../../library/asyncio-stream.rst:235
msgid ""
"Return :const:`True` if the transport supports :meth:`write_eof`, "
":const:`False` if not. See :meth:`WriteTransport.can_write_eof`."
msgstr ""
"トランスポートが :meth:`write_eof` をサポートしている場合は :const:`True` を、していない場合は "
":const:`False` を返します。:meth:`WriteTransport.can_write_eof` を参照してください。"

#: ../../library/asyncio-stream.rst:240
msgid "Close the transport: see :meth:`BaseTransport.close`."
msgstr "トランスポートを閉じます: :meth:`BaseTransport.close` を参照してください。"

#: ../../library/asyncio-stream.rst:244
msgid "Return ``True`` if the writer is closing or is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:250
msgid "Wait until the writer is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:252
msgid ""
"Should be called after :meth:`close`  to wait until the underlying "
"connection (and the associated transport/protocol pair) is closed."
msgstr ""

#: ../../library/asyncio-stream.rst:259
msgid ""
"Let the write buffer of the underlying transport a chance to be flushed."
msgstr "下層のトランスポートの書き込みバッファーがフラッシュされる機会を与えます。"

#: ../../library/asyncio-stream.rst:261
msgid "The intended use is to write::"
msgstr "意図されている用途は書き込みです::"

#: ../../library/asyncio-stream.rst:266
msgid ""
"When the size of the transport buffer reaches the high-water limit (the "
"protocol is paused), block until the size of the buffer is drained down to "
"the low-water limit and the protocol is resumed. When there is nothing to "
"wait for, the yield-from continues immediately."
msgstr ""
"トランスポートバッファのサイズが最高水位点に達した場合 "
"(プロトコルが一時停止された場合)、バッファサイズが最低水位点まで引き出されて、プロトコルが再開されるまで、ブロックします。待機するものがなくなると、直ちに"
" yield-from を続行します。"

#: ../../library/asyncio-stream.rst:271
msgid ""
"Yielding from :meth:`drain` gives the opportunity for the loop to schedule "
"the write operation and flush the buffer. It should especially be used when "
"a possibly large amount of data is written to the transport, and the "
"coroutine does not yield-from between calls to :meth:`write`."
msgstr ""
":meth:`drain` から yield "
"することにより、ループは書き込み操作をスケジュールし、バッファのフラッシュを行うことができます。このことは、トランスポートに大量のデータが書き込まれる可能性がある場合に非常に有用で、コルーチンは"
" :meth:`write` 呼び出しの間に yield-from を行いません。"

#: ../../library/asyncio-stream.rst:280
msgid ""
"Return optional transport information: see "
":meth:`BaseTransport.get_extra_info`."
msgstr "オプションのトランスポート情報を返します: :meth:`BaseTransport.get_extra_info` を参照してください。"

#: ../../library/asyncio-stream.rst:285
msgid ""
"Write some *data* bytes to the transport: see :meth:`WriteTransport.write`."
msgstr "トランスポートにバイト列 *data* を書き込みます: :meth:`WriteTransport.write` を参照してください。"

#: ../../library/asyncio-stream.rst:290
msgid ""
"Write a list (or any iterable) of data bytes to the transport: see "
":meth:`WriteTransport.writelines`."
msgstr ""
"バイト列のデータのリスト (またはリテラブル) をトランスポートに書き込みます: :meth:`WriteTransport.writelines` "
"を参照してください。"

#: ../../library/asyncio-stream.rst:295
msgid ""
"Close the write end of the transport after flushing buffered data: see "
":meth:`WriteTransport.write_eof`."
msgstr ""
"バッファーされたデータをフラッシュした後送信側のトランスポートをクローズします: :meth:`WriteTransport.write_eof` "
"を参照してください。"

#: ../../library/asyncio-stream.rst:300
msgid "StreamReaderProtocol"
msgstr "StreamReaderProtocol"

#: ../../library/asyncio-stream.rst:304
msgid ""
"Trivial helper class to adapt between :class:`Protocol` and "
":class:`StreamReader`. Subclass of :class:`Protocol`."
msgstr ""
":class:`Protocol` と :class:`StreamReader` "
"を適合させる些末なヘルパークラスです。:class:`Protocol` のサブクラスです。"

#: ../../library/asyncio-stream.rst:307
msgid ""
"*stream_reader* is a :class:`StreamReader` instance, *client_connected_cb* "
"is an optional function called with (stream_reader, stream_writer) when a "
"connection is made, *loop* is the event loop instance to use."
msgstr ""
"*stream_reader* は :class:`StreamReader` のインスタンスです。*client_connected_cb* "
"は接続されたときに (stream_reader, stream_writer) を引数として呼び出されるオプションの関数です。*loop* "
"は使用するイベントループのインスタンスです。"

#: ../../library/asyncio-stream.rst:311
msgid ""
"(This is a helper class instead of making :class:`StreamReader` itself a "
":class:`Protocol` subclass, because the :class:`StreamReader` has other "
"potential uses, and to prevent the user of the :class:`StreamReader` from "
"accidentally calling inappropriate methods of the protocol.)"
msgstr ""
"(これは :class:`StreamReader` 自身を :class:`Protocol` "
"のサブクラスとする代わりのヘルパークラスです。:class:`StreamReader` はその他の潜在的な用途を持つため、そして "
":class:`StreamReader` の利用者が誤って不適切なプロトコルのメソッドを呼び出すことを回避するためこのように実装されています)"

#: ../../library/asyncio-stream.rst:318
msgid "IncompleteReadError"
msgstr "IncompleteReadError"

#: ../../library/asyncio-stream.rst:322
msgid "Incomplete read error, subclass of :exc:`EOFError`."
msgstr "不完全な読み込みエラーです。:exc:`EOFError` のサブクラスです。"

#: ../../library/asyncio-stream.rst:326
msgid "Total number of expected bytes (:class:`int`)."
msgstr "想定されていたバイト数 (:class:`int`) です。"

#: ../../library/asyncio-stream.rst:330
msgid ""
"Read bytes string before the end of stream was reached (:class:`bytes`)."
msgstr "ストリームの終端に達する前に読み込んだバイト文字列 (:class:`bytes`) です。"

#: ../../library/asyncio-stream.rst:334
msgid "LimitOverrunError"
msgstr "LimitOverrunError"

#: ../../library/asyncio-stream.rst:338
msgid "Reached the buffer limit while looking for a separator."
msgstr "区切り文字を探している間にバッファリミットに到達しました。"

#: ../../library/asyncio-stream.rst:342
msgid "Total number of to be consumed bytes."
msgstr "未消費のバイトの合計数。"

#: ../../library/asyncio-stream.rst:346
msgid "Stream examples"
msgstr "ストリームの例"

#: ../../library/asyncio-stream.rst:351
msgid "TCP echo client using streams"
msgstr "ストリームを使った TCP Echo クライアント"

#: ../../library/asyncio-stream.rst:353
msgid "TCP echo client using the :func:`asyncio.open_connection` function::"
msgstr ":func:`asyncio.open_connection` 関数を使った TCP Echo クライアントです::"

#: ../../library/asyncio-stream.rst:377
msgid ""
"The :ref:`TCP echo client protocol <asyncio-tcp-echo-client-protocol>` "
"example uses the :meth:`AbstractEventLoop.create_connection` method."
msgstr ""
":meth:`AbstractEventLoop.create_connection` メソッドを使った :ref:`TCP Echo "
"クライアントプロトコル <asyncio-tcp-echo-client-protocol>` の例"

#: ../../library/asyncio-stream.rst:384
msgid "TCP echo server using streams"
msgstr "ストリームを使った TCP Echo サーバー"

#: ../../library/asyncio-stream.rst:386
msgid "TCP echo server using the :func:`asyncio.start_server` function::"
msgstr ":func:`asyncio.start_server` 関数を使った TCP Echo サーバーです::"

#: ../../library/asyncio-stream.rst:421
msgid ""
"The :ref:`TCP echo server protocol <asyncio-tcp-echo-server-protocol>` "
"example uses the :meth:`AbstractEventLoop.create_server` method."
msgstr ""
":meth:`AbstractEventLoop.create_server` メソッドを使った :ref:`TCP Echo サーバープロトコル "
"<asyncio-tcp-echo-server-protocol>` の例"

#: ../../library/asyncio-stream.rst:426
msgid "Get HTTP headers"
msgstr "HTTP ヘッダーの取得"

#: ../../library/asyncio-stream.rst:428
msgid ""
"Simple example querying HTTP headers of the URL passed on the command line::"
msgstr "コマンドラインから渡された URL の HTTP ヘッダーを問い合わせる簡単な例です::"

#: ../../library/asyncio-stream.rst:462
msgid "Usage::"
msgstr "使い方::"

#: ../../library/asyncio-stream.rst:466
msgid "or with HTTPS::"
msgstr "または HTTPS を使用::"

#: ../../library/asyncio-stream.rst:473
msgid "Register an open socket to wait for data using streams"
msgstr "ストリームを使ってデータを待つオープンソケットの登録"

#: ../../library/asyncio-stream.rst:475
msgid ""
"Coroutine waiting until a socket receives data using the "
":func:`open_connection` function::"
msgstr ":func:`open_connection` 関数を使ってソケットがデータを受信するまで待つコルーチンです::"

#: ../../library/asyncio-stream.rst:507
msgid ""
"The :ref:`register an open socket to wait for data using a protocol "
"<asyncio-register-socket>` example uses a low-level protocol created by the "
":meth:`AbstractEventLoop.create_connection` method."
msgstr ""
":ref:`プロトコルを使ってデータを待つオープンソケットの登録 <asyncio-register-socket>` の例では "
":meth:`AbstractEventLoop.create_connection` メソッドによって作成された低レベルプロトコルを使用しています。"

#: ../../library/asyncio-stream.rst:511
msgid ""
"The :ref:`watch a file descriptor for read events <asyncio-watch-read-"
"event>` example uses the low-level :meth:`AbstractEventLoop.add_reader` "
"method to register the file descriptor of a socket."
msgstr ""
":ref:`読み込みイベント用のファイル記述子の監視 <asyncio-watch-read-event>` "
"の例では、ソケットのファイル記述子を登録するのに低水準の :meth:`AbstractEventLoop.add_reader` "
"メソッドを使用しています。"
